name: go-docker

on: [push]

jobs:
#  test:
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
#    steps:
#      - uses: actions/checkout@v2
#      - name: Run Unit Tests
#        run: go test
  deploy:
    runs-on: ubuntu-latest
#    needs: test
#    if: startsWith(github.ref, 'refs/tags')
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v2
      - name: Extract Version
        id: version_step
        run: |
          echo "##[set-output name=version;]VERSION=${GITHUB_REF#$"refs/tags/v"}"
          echo "##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$"refs/tags/v"}"
          echo "##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest"

#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1

#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKER_USER_NAME }}
#          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
#      - name: Login to Aliyun Container Registry (ACR)
#        uses: aliyun/acr-login@v1
#        with:
#          login-server: https://registry.cn-hangzhou.aliyuncs.com
#          region-id: cn-hangzhou  # 3
#          username: "${{ secrets.ACR_USERNAME }}"
#          password: "${{ secrets.ACR_PASSWORD }}"
      - name: PrepareReg Names
        id: read-docker-image-identifiers
        run: |
          echo VERSION_TAG=$(echo ${{ steps.version_step.outputs.version_tag }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
          echo LASTEST_TAG=$(echo ${{ steps.version_step.outputs.latest_tag  }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
#
#      - name: Build and push Docker images
#        id: docker_build
#        uses: docker/build-push-action@v2.3.0
#        with:
#          push: true
#          tags: |
#            ${{env.VERSION_TAG}}
#            ${{env.LASTEST_TAG}}
#          build-args: |
#            ${{steps.version_step.outputs.version}}
      - name: Build the Docker image
        env:
          ENV_PARAM: prod
        run: |
          ls
          docker version
          # 登录阿里云镜像仓库
          docker login --username=${{ secrets.ACR_USERNAME }} --password=${{ secrets.ACR_PASSWORD }} registry.cn-hangzhou.aliyuncs.com
          echo login
          echo ${{steps.version_step.outputs.version}}
          echo ${{env.VERSION_TAG}}
          echo ${{env.LASTEST_TAG}}
          echo ${{env.ENV_PARAM}}
          # cd gooses_game_api
          # 使用Dockerfile构建镜像
          # docker build . --file Dockerfile --tag registry.cn-hangzhou.aliyuncs.com/goose_game/gooses_game_api:${{env.VERSION_TAG}}
          docker build --build-arg ENV_PARAM="${{env.ENV_PARAM}}" -t gooses_game_web:latest .
          docker tag gooses_game_web:latest registry.cn-hangzhou.aliyuncs.com/goose_game/gooses_game_web:latest
          # 推送镜像到镜像仓库
          docker push registry.cn-hangzhou.aliyuncs.com/goose_game/gooses_game_web:latest
